import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { User } from "@/entities/User";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Settings, User as UserIcon, Sliders, Eye, EyeOff } from "lucide-react";

export default function AppMenu() {
  const [user, setUser] = useState(null);
  const [userName, setUserName] = useState('');
  const [features, setFeatures] = useState({
    showVoerkraal: true,
    showInentings: true,
    showReenval: true,
    showBemarking: true,
    showVerslae: true,
  });
  const [globalBlurValues, setGlobalBlurValues] = useState(false);

  useEffect(() => {
    loadUserData();
    loadFeatureSettings();
  }, []);

  const loadUserData = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
      setUserName(userData.additional_data?.display_name || userData.full_name || '');
    } catch (error) {
      console.error("Kon nie gebruiker data laai nie:", error);
    }
  };

  const loadFeatureSettings = () => {
    const saved = localStorage.getItem('appFeatures');
    if (saved) {
      setFeatures(JSON.parse(saved));
    }
  };

  const saveFeatureSettings = (newFeatures) => {
    setFeatures(newFeatures);
    localStorage.setItem('appFeatures', JSON.stringify(newFeatures));
    
    // Trigger global event to update other components
    window.dispatchEvent(new CustomEvent('featuresUpdated', { detail: newFeatures }));
  };

  const saveUserName = async () => {
    try {
      await User.updateMyUserData({ display_name: userName });
      setUser(prev => ({ ...prev, additional_data: { ...prev.additional_data, display_name: userName } }));
    } catch (error) {
      console.error("Kon nie gebruiker naam stoor nie:", error);
    }
  };

  const toggleGlobalBlur = () => {
    const newState = !globalBlurValues;
    setGlobalBlurValues(newState);
    localStorage.setItem('globalBlurValues', newState.toString());
    
    // Trigger global event to blur/unblur all money values
    window.dispatchEvent(new CustomEvent('globalBlurToggle', { detail: newState }));
  };

  const handleFeatureToggle = (feature) => {
    const newFeatures = { ...features, [feature]: !features[feature] };
    saveFeatureSettings(newFeatures);
  };

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm" className="flex items-center gap-2">
          <Settings className="w-4 h-4" />
          Instellings
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80" align="end">
        <div className="space-y-4">
          {/* Account Section */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <UserIcon className="w-4 h-4" />
              <h4 className="font-semibold">Account</h4>
            </div>
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Input
                  value={userName}
                  onChange={(e) => setUserName(e.target.value)}
                  placeholder="Jou naam"
                  className="flex-1"
                />
                <Button size="sm" onClick={saveUserName}>
                  Stoor
                </Button>
              </div>
              <p className="text-xs text-stone-500">
                Email: {user?.email || 'Nie beskikbaar nie'}
              </p>
            </div>
          </div>

          <Separator />

          {/* Features Section */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <Sliders className="w-4 h-4" />
              <h4 className="font-semibold">Features</h4>
            </div>
            <div className="space-y-3">
              {Object.entries(features).map(([key, enabled]) => (
                <div key={key} className="flex items-center justify-between">
                  <Label className="text-sm">
                    {key === 'showVoerkraal' && 'Voerkraal Tab'}
                    {key === 'showInentings' && 'Inentings Tab'}
                    {key === 'showReenval' && 'Reenval Tab'}
                    {key === 'showBemarking' && 'Bemarking Tab'}
                    {key === 'showVerslae' && 'Verslae Tab'}
                  </Label>
                  <Switch
                    checked={enabled}
                    onCheckedChange={() => handleFeatureToggle(key)}
                  />
                </div>
              ))}
            </div>
          </div>

          <Separator />

          {/* Global Settings */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <Eye className="w-4 h-4" />
              <h4 className="font-semibold">Vertoon Instellings</h4>
            </div>
            <div className="flex items-center justify-between">
              <Label className="text-sm">Versteek Geld Waardes</Label>
              <Button
                variant="outline"
                size="sm"
                onClick={toggleGlobalBlur}
                className="flex items-center gap-2"
              >
                {globalBlurValues ? <EyeOff className="w-3 h-3" /> : <Eye className="w-3 h-3" />}
                {globalBlurValues ? 'Wys' : 'Versteek'}
              </Button>
            </div>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}