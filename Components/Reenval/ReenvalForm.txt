import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Cloud, Save, X } from "lucide-react";

export default function ReenvalForm({ reenval, plase, onSubmit, onCancel }) {
  const [formData, setFormData] = useState(reenval || {
    plaas_id: "",
    datum: new Date().toISOString().split('T')[0],
    reenval_mm: "",
    tipe_reenval: "matig",
    opmerkings: ""
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    
    const submitData = {
      ...formData,
      reenval_mm: parseFloat(formData.reenval_mm) || 0,
    };
    
    onSubmit(submitData);
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="mb-8"
    >
      <Card className="shadow-lg bg-white/90 backdrop-blur-sm">
        <CardHeader className="p-6 border-b border-stone-100">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <Cloud className="w-5 h-5 text-blue-500" />
            {reenval ? 'Wysig Reenval' : 'Nuwe Reenval Entry'}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="plaas_id" className="text-stone-700 font-semibold">
                  Plaas *
                </Label>
                <Select
                  value={formData.plaas_id}
                  onValueChange={(value) => handleChange('plaas_id', value)}
                  required
                >
                  <SelectTrigger className="border-stone-300 focus:border-blue-500">
                    <SelectValue placeholder="Kies 'n plaas" />
                  </SelectTrigger>
                  <SelectContent>
                    {plase.map((plaas) => (
                      <SelectItem key={plaas.id} value={plaas.id}>
                        {plaas.naam}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="datum" className="text-stone-700 font-semibold">
                  Datum *
                </Label>
                <Input
                  id="datum"
                  type="date"
                  value={formData.datum}
                  onChange={(e) => handleChange('datum', e.target.value)}
                  required
                  className="border-stone-300 focus:border-blue-500"
                />
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="reenval_mm" className="text-stone-700 font-semibold">
                  Reenval (mm) *
                </Label>
                <Input
                  id="reenval_mm"
                  type="number"
                  step="0.1"
                  min="0"
                  value={formData.reenval_mm}
                  onChange={(e) => handleChange('reenval_mm', e.target.value)}
                  placeholder="0.0"
                  required
                  className="border-stone-300 focus:border-blue-500"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="tipe_reenval" className="text-stone-700 font-semibold">
                  Tipe Reenval
                </Label>
                <Select
                  value={formData.tipe_reenval}
                  onValueChange={(value) => handleChange('tipe_reenval', value)}
                >
                  <SelectTrigger className="border-stone-300 focus:border-blue-500">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="lig">Lig</SelectItem>
                    <SelectItem value="matig">Matig</SelectItem>
                    <SelectItem value="swaar">Swaar</SelectItem>
                    <SelectItem value="storm">Storm</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="opmerkings" className="text-stone-700 font-semibold">
                Opmerkings
              </Label>
              <Textarea
                id="opmerkings"
                value={formData.opmerkings}
                onChange={(e) => handleChange('opmerkings', e.target.value)}
                placeholder="Enige addisionele opmerkings oor die weer..."
                rows={3}
                className="border-stone-300 focus:border-blue-500"
              />
            </div>

            <div className="flex justify-end gap-3 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
                className="border-stone-300 text-stone-700 hover:bg-stone-50"
              >
                <X className="w-4 h-4 mr-2" />
                Kanselleer
              </Button>
              <Button
                type="submit"
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Save className="w-4 h-4 mr-2" />
                {reenval ? 'Werk By' : 'Stoor Reenval'}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </motion.div>
  );
}