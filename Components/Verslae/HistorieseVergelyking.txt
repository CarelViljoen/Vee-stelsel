
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Calendar } from 'lucide-react';

export default function HistoriesVergelyking({ data, loading }) {
  const [reportType, setReportType] = useState('tellings');

  const processDataForChart = () => {
    let sourceData;
    let valueKey;
    let nameKey = 'Jaar';

    switch (reportType) {
      case 'bemarking':
        sourceData = data.bemarkings;
        valueKey = 'Totale Waarde';
        break;
      case 'reenval':
        sourceData = data.reenvals;
        valueKey = 'Totale Reenval (mm)';
        break;
      case 'tellings':
      default:
        sourceData = data.tellings;
        valueKey = 'Gemiddelde Skape';
        break;
    }

    if (!sourceData || sourceData.length === 0) return [];

    const yearlyData = sourceData.reduce((acc, item) => {
      const year = new Date(item.datum).getFullYear();
      if (!acc[year]) {
        acc[year] = { count: 0, total: 0 };
      }
      acc[year].count++;
      
      if (reportType === 'bemarking') acc[year].total += item.totale_waarde || 0;
      if (reportType === 'reenval') acc[year].total += item.reenval_mm || 0;
      if (reportType === 'tellings') acc[year].total += item.totaal_lewend || 0;

      return acc;
    }, {});

    return Object.entries(yearlyData).map(([year, values]) => {
      let finalValue = values.total;
      if (reportType === 'tellings') {
        finalValue = values.count > 0 ? Math.round(values.total / values.count) : 0;
      }
      return {
        [nameKey]: year,
        [valueKey]: finalValue,
      };
    }).sort((a,b) => a[nameKey] - b[nameKey]);
  };
  
  if (loading) {
    return (
      <Card className="shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader><Skeleton className="h-6 w-56" /></CardHeader>
        <CardContent>
          <Skeleton className="h-64 w-full" />
        </CardContent>
      </Card>
    );
  }

  const chartData = processDataForChart();

