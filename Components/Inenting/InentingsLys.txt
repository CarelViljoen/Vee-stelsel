import React from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Syringe, Edit, Trash2, Calendar, AlertTriangle } from "lucide-react";
import { format, isAfter, isBefore, addDays } from "date-fns";
import { af } from "date-fns/locale";

const inentingKleure = {
  pulpy_kidney: "bg-red-100 text-red-800",
  bluetongue: "bg-blue-100 text-blue-800",
  orf: "bg-yellow-100 text-yellow-800",
  anthrax: "bg-purple-100 text-purple-800",
  rabies: "bg-pink-100 text-pink-800",
  ander: "bg-gray-100 text-gray-800"
};

export default function InentingLys({ inentings, kampe, plase, onEdit, onDelete }) {
  const getKampNaam = (kampId) => {
    const kamp = kampe.find(k => k.id === kampId);
    return kamp?.naam || 'Onbekende Kamp';
  };

  const getPlaasNaam = (kampId) => {
    const kamp = kampe.find(k => k.id === kampId);
    if (!kamp) return 'Onbekende Plaas';
    const plaas = plase.find(p => p.id === kamp.plaas_id);
    return plaas?.naam || 'Onbekende Plaas';
  };

  const getInentingNaam = (inenting) => {
    if (inenting.tipe_inenting === 'ander') {
      return inenting.ander_inenting || 'Ander';
    }
    const naamMap = {
      pulpy_kidney: 'Pulpy Kidney',
      bluetongue: 'Bluetongue',
      orf: 'Orf',
      anthrax: 'Anthrax',
      rabies: 'Rabies'
    };
    return naamMap[inenting.tipe_inenting] || inenting.tipe_inenting;
  };

  const isVolgendeInentingNaby = (datum) => {
    if (!datum) return false;
    const today = new Date();
    const nextDate = new Date(datum);
    const daysDiff = Math.ceil((nextDate - today) / (1000 * 60 * 60 * 24));
    return daysDiff <= 30 && daysDiff >= 0;
  };

  const isVolgendeInentingLaat = (datum) => {
    if (!datum) return false;
    const today = new Date();
    const nextDate = new Date(datum);
    return isBefore(nextDate, today);
  };

  return (
    <Card className="shadow-lg bg-white/80 backdrop-blur-sm">
      <CardHeader className="p-6 border-b border-stone-100">
        <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
          <Syringe className="w-5 h-5 text-green-500" />
          Inenting Rekords
        </CardTitle>
      </CardHeader>
      <CardContent className="p-0">
        {inentings.length > 0 ? (
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="bg-stone-50">
                  <TableHead className="font-semibold">Plaas</TableHead>
                  <TableHead className="font-semibold">Kamp</TableHead>
                  <TableHead className="font-semibold">Datum</TableHead>
                  <TableHead className="font-semibold">Inenting</TableHead>
                  <TableHead className="font-semibold">Diere</TableHead>
                  <TableHead className="font-semibold">Volgende</TableHead>
                  <TableHead className="font-semibold">Aksies</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {inentings.map((inenting) => (
                  <TableRow key={inenting.id} className="hover:bg-stone-50 transition-colors">
                    <TableCell>
                      <span className="font-medium text-stone-800">
                        {getPlaasNaam(inenting.kamp_id)}
                      </span>
                    </TableCell>
                    <TableCell>
                      <span className="font-medium text-stone-800">
                        {getKampNaam(inenting.kamp_id)}
                      </span>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Calendar className="w-4 h-4 text-stone-500" />
                        {format(new Date(inenting.datum), 'dd MMM yyyy', { locale: af })}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant="secondary" className={inentingKleure[inenting.tipe_inenting]}>
                        {getInentingNaam(inenting)}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <span className="font-semibold text-emerald-600">
                        {inenting.aantal_diere} diere
                      </span>
                    </TableCell>
                    <TableCell>
                      {inenting.volgende_inenting ? (
                        <div className="flex items-center gap-2">
                          {isVolgendeInentingLaat(inenting.volgende_inenting) ? (
                            <AlertTriangle className="w-4 h-4 text-red-500" />
                          ) : isVolgendeInentingNaby(inenting.volgende_inenting) ? (
                            <AlertTriangle className="w-4 h-4 text-yellow-500" />
                          ) : (
                            <Calendar className="w-4 h-4 text-green-500" />
                          )}
                          <span className={`text-sm ${
                            isVolgendeInentingLaat(inenting.volgende_inenting) ? 'text-red-600 font-semibold' :
                            isVolgendeInentingNaby(inenting.volgende_inenting) ? 'text-yellow-600 font-semibold' :
                            'text-stone-600'
                          }`}>
                            {format(new Date(inenting.volgende_inenting), 'dd MMM', { locale: af })}
                          </span>
                        </div>
                      ) : (
                        <span className="text-stone-400">-</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => onEdit(inenting)}
                          className="h-8 w-8 p-0 hover:bg-blue-100"
                        >
                          <Edit className="w-4 h-4 text-blue-600" />
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => onDelete(inenting)}
                          className="h-8 w-8 p-0 hover:bg-red-100"
                        >
                          <Trash2 className="w-4 h-4 text-red-600" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        ) : (
          <div className="text-center py-12 text-stone-500">
            <Syringe className="w-16 h-16 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">Geen inentings nog nie</p>
            <p>Begin deur jou eerste inenting te log</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}