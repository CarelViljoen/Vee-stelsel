import React from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Calendar, AlertTriangle, Clock } from "lucide-react";
import { format, isAfter, isBefore, addDays } from "date-fns";
import { af } from "date-fns/locale";

export default function InentingKalender({ inentings, kampe }) {
  const getKampNaam = (kampId) => {
    const kamp = kampe.find(k => k.id === kampId);
    return kamp?.naam || 'Onbekende Kamp';
  };

  const getVolgendeInentings = () => {
    const today = new Date();
    return inentings
      .filter(inenting => inenting.volgende_inenting)
      .map(inenting => ({
        ...inenting,
        volgende_datum: new Date(inenting.volgende_inenting),
        kamp_naam: getKampNaam(inenting.kamp_id)
      }))
      .sort((a, b) => a.volgende_datum - b.volgende_datum);
  };

  const volgendeInentings = getVolgendeInentings();
  const laatInentings = volgendeInentings.filter(i => isBefore(i.volgende_datum, new Date()));
  const komendInentings = volgendeInentings.filter(i => {
    const daysDiff = Math.ceil((i.volgende_datum - new Date()) / (1000 * 60 * 60 * 24));
    return daysDiff <= 30 && daysDiff >= 0;
  });

  return (
    <div className="space-y-6">
      <Card className="shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader className="p-6 border-b border-stone-100">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <Calendar className="w-5 h-5 text-green-500" />
            Inenting Kalender
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <div className="space-y-6">
            {/* Laat Inentings */}
            {laatInentings.length > 0 && (
              <div className="p-4 bg-red-50 rounded-xl">
                <h4 className="font-semibold text-red-800 mb-3 flex items-center gap-2">
                  <AlertTriangle className="w-4 h-4" />
                  Laat Inentings ({laatInentings.length})
                </h4>
                <div className="space-y-3">
                  {laatInentings.slice(0, 5).map((inenting) => (
                    <div key={inenting.id} className="p-3 bg-red-100 rounded-lg">
                      <div className="flex justify-between items-start mb-1">
                        <span className="font-medium text-red-800 text-sm">
                          {inenting.kamp_naam}
                        </span>
                        <Badge className="bg-red-200 text-red-800 text-xs">
                          {Math.abs(Math.ceil((inenting.volgende_datum - new Date()) / (1000 * 60 * 60 * 24)))} dae laat
                        </Badge>
                      </div>
                      <p className="text-sm text-red-700">
                        {inenting.tipe_inenting === 'ander' ? inenting.ander_inenting : 
                         inenting.tipe_inenting.replace('_', ' ')}
                      </p>
                      <p className="text-xs text-red-600">
                        {format(inenting.volgende_datum, 'dd MMM yyyy', { locale: af })}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Komende Inentings */}
            {komendInentings.length > 0 && (
              <div className="p-4 bg-yellow-50 rounded-xl">
                <h4 className="font-semibold text-yellow-800 mb-3 flex items-center gap-2">
                  <Clock className="w-4 h-4" />
                  Komende Inentings ({komendInentings.length})
                </h4>
                <div className="space-y-3">
                  {komendInentings.slice(0, 5).map((inenting) => (
                    <div key={inenting.id} className="p-3 bg-yellow-100 rounded-lg">
                      <div className="flex justify-between items-start mb-1">
                        <span className="font-medium text-yellow-800 text-sm">
                          {inenting.kamp_naam}
                        </span>
                        <Badge className="bg-yellow-200 text-yellow-800 text-xs">
                          {Math.ceil((inenting.volgende_datum - new Date()) / (1000 * 60 * 60 * 24))} dae
                        </Badge>
                      </div>
                      <p className="text-sm text-yellow-700">
                        {inenting.tipe_inenting === 'ander' ? inenting.ander_inenting : 
                         inenting.tipe_inenting.replace('_', ' ')}
                      </p>
                      <p className="text-xs text-yellow-600">
                        {format(inenting.volgende_datum, 'dd MMM yyyy', { locale: af })}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Stats */}
            <div className="p-4 bg-green-50 rounded-xl">
              <h4 className="font-semibold text-stone-800 mb-3">Inenting Opsomming</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-stone-600">Totale Inentings:</span>
                  <span className="font-semibold">{inentings.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-stone-600">Laat Inentings:</span>
                  <span className="font-semibold text-red-600">{laatInentings.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-stone-600">Komende (30 dae):</span>
                  <span className="font-semibold text-yellow-600">{komendInentings.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-stone-600">Totale Diere Ge√Ønent:</span>
                  <span className="font-semibold text-green-600">
                    {inentings.reduce((total, i) => total + (i.aantal_diere || 0), 0)}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}