import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Wheat, Save, X } from "lucide-react";

export default function VoerStoorForm({ stoor, voerStoor, onSubmit, onCancel }) {
  const [formData, setFormData] = useState(stoor || {
    voer_naam: "",
    kg_per_sak: "",
    aantal_sakke: "",
    koste_per_sak: "",
    datum_aangekoop: new Date().toISOString().split('T')[0]
  });
  const [isNewFeed, setIsNewFeed] = useState(true);

  const bestaandeVoere = [...new Set(voerStoor.map(v => v.voer_naam))];

  useEffect(() => {
    if (formData.voer_naam && bestaandeVoere.includes(formData.voer_naam)) {
      const existingFeed = voerStoor.find(f => f.voer_naam === formData.voer_naam);
      if (existingFeed) {
        setFormData(prev => ({
          ...prev,
          kg_per_sak: existingFeed.kg_per_sak || '',
        }));
      }
      setIsNewFeed(false);
    } else {
      setIsNewFeed(true);
    }
  }, [formData.voer_naam, voerStoor]);


  const handleSubmit = (e) => {
    e.preventDefault();
    const submitData = Object.entries(formData).reduce((acc, [key, value]) => {
      if (['kg_per_sak', 'aantal_sakke', 'koste_per_sak'].includes(key)) {
        acc[key] = parseFloat(value) || 0;
      } else {
        acc[key] = value;
      }
      return acc;
    }, {});
    onSubmit(submitData);
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="mb-8"
    >
      <Card className="shadow-lg bg-white/90 backdrop-blur-sm">
        <CardHeader className="p-6 border-b border-stone-100">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <Wheat className="w-5 h-5 text-orange-500" />
            Voeg Voer By Stoor
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="voer_naam_select" className="text-stone-700 font-semibold">Voernaam *</Label>
                <Select onValueChange={(value) => handleChange('voer_naam', value)}>
                  <SelectTrigger><SelectValue placeholder="Kies bestaande voer..."/></SelectTrigger>
                  <SelectContent>
                    {bestaandeVoere.map(naam => (
                      <SelectItem key={naam} value={naam}>{naam}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                 <Input
                  id="voer_naam_text"
                  type="text"
                  value={formData.voer_naam}
                  onChange={(e) => handleChange('voer_naam', e.target.value)}
                  placeholder="Of tik nuwe voernaam"
                  required
                  className="border-stone-300 focus:border-orange-500 mt-2"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="kg_per_sak" className="text-stone-700 font-semibold">Kg per Sak *</Label>
                <Input
                  id="kg_per_sak"
                  type="number"
                  step="0.1"
                  value={formData.kg_per_sak}
                  onChange={(e) => handleChange('kg_per_sak', e.target.value)}
                  required
                  readOnly={!isNewFeed}
                  className={`border-stone-300 focus:border-orange-500 ${!isNewFeed && 'bg-stone-100'}`}
                />
              </div>
            </div>

             <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="aantal_sakke" className="text-stone-700 font-semibold">Aantal Sakke bygevoeg *</Label>
                <Input
                  id="aantal_sakke"
                  type="number"
                  value={formData.aantal_sakke}
                  onChange={(e) => handleChange('aantal_sakke', e.target.value)}
                  required
                  className="border-stone-300 focus:border-orange-500"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="koste_per_sak" className="text-stone-700 font-semibold">Koste per Sak</Label>
                <Input
                  id="koste_per_sak"
                  type="number"
                  step="0.01"
                  value={formData.koste_per_sak}
                  onChange={(e) => handleChange('koste_per_sak', e.target.value)}
                  className="border-stone-300 focus:border-orange-500"
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="datum_aangekoop" className="text-stone-700 font-semibold">Datum Aangekoop</Label>
              <Input
                id="datum_aangekoop"
                type="date"
                value={formData.datum_aangekoop}
                onChange={(e) => handleChange('datum_aangekoop', e.target.value)}
                className="border-stone-300 focus:border-orange-500"
              />
            </div>

            <div className="flex justify-end gap-3 pt-4">
              <Button type="button" variant="outline" onClick={onCancel}>
                <X className="w-4 h-4 mr-2" />
                Kanselleer
              </Button>
              <Button type="submit" className="bg-orange-600 hover:bg-orange-700">
                <Save className="w-4 h-4 mr-2" />
                Stoor
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </motion.div>
  );
}