import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Wheat, Save, X, Plus, Trash2 } from "lucide-react";

const skaapTipes = ["ooie", "ramme", "ou_ooie", "lammers"];

export default function VoerkralForm({ voerkral, plase, voerStoor, onSubmit, onCancel }) {
  const [formData, setFormData] = useState(
    voerkral || {
      naam: "",
      plaas_id: "",
      aktief: true,
      skaap_tipes: [],
      skaap_getalle: {},
      kg_per_kop_per_dag: {},
      voer_tipe: "",
      opmerkings: ""
    }
  );

  const voerNaamlys = [...new Set(voerStoor.map(v => v.voer_naam))];

  const handleSkaapTipeChange = (tipe, checked) => {
    setFormData(prev => {
      const newSkaapTipes = checked
        ? [...prev.skaap_tipes, tipe]
        : prev.skaap_tipes.filter(t => t !== tipe);
      return { ...prev, skaap_tipes: newSkaapTipes };
    });
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  
  const handleDetailChange = (type, field, value) => {
     setFormData(prev => ({
      ...prev,
      [type]: {
        ...prev[type],
        [field]: parseFloat(value) || 0
      }
    }));
  }

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="mb-8"
    >
      <Card className="shadow-lg bg-white/90 backdrop-blur-sm">
        <CardHeader className="p-6 border-b border-stone-100">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <Wheat className="w-5 h-5 text-orange-500" />
            {voerkral ? `Wysig ${voerkral.naam}` : 'Nuwe Voerkraal'}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label>Naam *</Label>
                <Input value={formData.naam} onChange={e => handleChange('naam', e.target.value)} required />
              </div>
              <div className="space-y-2">
                <Label>Plaas *</Label>
                <Select value={formData.plaas_id} onValueChange={val => handleChange('plaas_id', val)} required>
                  <SelectTrigger><SelectValue placeholder="Kies Plaas" /></SelectTrigger>
                  <SelectContent>{plase.map(p => <SelectItem key={p.id} value={p.id}>{p.naam}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
                <Label>Voer Tipe</Label>
                <Select value={formData.voer_tipe} onValueChange={val => handleChange('voer_tipe', val)}>
                  <SelectTrigger><SelectValue placeholder="Kies Voer" /></SelectTrigger>
                  <SelectContent>{voerNaamlys.map(naam => <SelectItem key={naam} value={naam}>{naam}</SelectItem>)}</SelectContent>
                </Select>
              </div>

            <div className="flex items-center space-x-2">
              <Checkbox id="aktief" checked={formData.aktief} onCheckedChange={checked => handleChange('aktief', checked)} />
              <Label htmlFor="aktief">Voerkraal is Aktief</Label>
            </div>
            
            <div>
              <Label className="font-semibold">Skaap Tipes in Voerkraal</Label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-2">
                {skaapTipes.map(tipe => (
                  <div key={tipe} className="flex items-center space-x-2">
                    <Checkbox
                      id={`tipe_${tipe}`}
                      checked={formData.skaap_tipes.includes(tipe)}
                      onCheckedChange={checked => handleSkaapTipeChange(tipe, checked)}
                    />
                    <Label htmlFor={`tipe_${tipe}`} className="capitalize">{tipe.replace('_', ' ')}</Label>
                  </div>
                ))}
              </div>
            </div>

            {formData.skaap_tipes.length > 0 && (
              <div className="space-y-4 pt-4 border-t">
                {formData.skaap_tipes.map(tipe => (
                  <div key={tipe} className="grid grid-cols-2 gap-4 p-3 border rounded-lg">
                    <h4 className="col-span-2 font-semibold capitalize">{tipe.replace('_', ' ')}</h4>
                    <div className="space-y-2">
                      <Label>Aantal</Label>
                      <Input type="number" placeholder="0" value={formData.skaap_getalle[tipe] || ''} onChange={e => handleDetailChange('skaap_getalle', tipe, e.target.value)} />
                    </div>
                     <div className="space-y-2">
                      <Label>Kg/Kop/Dag</Label>
                      <Input type="number" step="0.1" placeholder="0.0" value={formData.kg_per_kop_per_dag[tipe] || ''} onChange={e => handleDetailChange('kg_per_kop_per_dag', tipe, e.target.value)} />
                    </div>
                  </div>
                ))}
              </div>
            )}

            <div className="flex justify-end gap-3 pt-4">
              <Button type="button" variant="outline" onClick={onCancel}>
                <X className="w-4 h-4 mr-2" />
                Kanselleer
              </Button>
              <Button type="submit" className="bg-orange-600 hover:bg-orange-700">
                <Save className="w-4 h-4 mr-2" />
                Stoor
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </motion.div>
  );
}