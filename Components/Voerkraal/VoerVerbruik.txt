
import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Wheat, Calendar, AlertTriangle, TrendingUp, Eye, EyeOff, Info, Plus } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import VoerStoorForm from './VoerStoorForm';

export default function VoerVerbruik({ voerkrals, voerStoor, onUpdate }) {
  const [showTotals, setShowTotals] = useState(true);
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [showStoorForm, setShowStoorForm] = useState(false);

  // 1. Bereken daaglikse verbruik per voer tipe
  const daaglikseVerbruik = voerkrals.reduce((acc, kraal) => {
    if (!kraal.aktief) return acc;
    
    const verbruik = Object.entries(kraal.skaap_getalle || {}).reduce((kraalTotaal, [tipe, aantal]) => {
      const kgPerKop = kraal.kg_per_kop_per_dag?.[tipe] || 0;
      return kraalTotaal + (aantal * kgPerKop);
    }, 0);

    if (kraal.voer_tipe) {
      if (!acc[kraal.voer_tipe]) {
        acc[kraal.voer_tipe] = 0;
      }
      acc[kraal.voer_tipe] += verbruik;
    }

    return acc;
  }, {});

  // 2. Bereken totale voer in stoor per tipe
  const voerInStoor = voerStoor.reduce((acc, item) => {
    if (!acc[item.voer_naam]) {
      acc[item.voer_naam] = { totaalKg: 0, totaalKoste: 0, sakke: 0 }; // Initialize sakke
    }
    const kg = (item.aantal_sakke || 0) * (item.kg_per_sak || 0);
    const koste = (item.aantal_sakke || 0) * (item.koste_per_sak || 0);
    acc[item.voer_naam].totaalKg += kg;
    acc[item.voer_naam].totaalKoste += koste;
    acc[item.voer_naam].sakke += item.aantal_sakke || 0; // Accumulate sakke
    return acc;
  }, {});
  
  // 3. Bereken dae oor
  const daeOor = Object.keys(daaglikseVerbruik).reduce((acc, voerNaam) => {
    const verbruik = daaglikseVerbruik[voerNaam];
    const inStoor = voerInStoor[voerNaam]?.totaalKg || 0;
    if (verbruik > 0) {
      acc[voerNaam] = Math.floor(inStoor / verbruik);
    } else {
      acc[voerNaam] = Infinity;
    }
    return acc;
  }, {});

  // 4. Bereken aankope in tydperk
  const getFilteredAankope = () => {
    if (!dateRange.start || !dateRange.end) return { totaalKg: 0, totaalKoste: 0 };
    
    const startDate = new Date(dateRange.start);
    const endDate = new Date(dateRange.end);
    endDate.setHours(23, 59, 59, 999); // Ensure end date includes the entire day

    const filtered = voerStoor.filter(item => {
      try {
        const itemDate = new Date(item.datum_aangekoop);
        return itemDate >= startDate && itemDate <= endDate;
      } catch { return false; }
    });
    
    const totaalKg = filtered.reduce((sum, item) => sum + ((item.aantal_sakke || 0) * (item.kg_per_sak || 0)), 0);
    const totaalKoste = filtered.reduce((sum, item) => sum + ((item.aantal_sakke || 0) * (item.koste_per_sak || 0)), 0);

    return { totaalKg, totaalKoste };
  };
  
  const gefilterdeAankope = getFilteredAankope();

  const handleStoorSubmit = async (stoorData) => {
    // In a real application, stoorData would be sent to an API here.
    // For this example, we just trigger a data refresh.
    // console.log("Submitting store data:", stoorData); // For debugging
    await onUpdate(); // Reload data on parent page
    setShowStoorForm(false);
  };

  return (
    <div className="space-y-6">
      <Card className="shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <Wheat className="w-5 h-5 text-orange-500" />
            Voer Beskikbaarheid
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {Object.keys(daeOor).length > 0 ? (
            Object.entries(daeOor).map(([voerNaam, dae]) => (
              <div key={voerNaam} className={`p-4 rounded-lg flex justify-between items-center ${dae <= 7 ? 'bg-red-50' : dae <= 30 ? 'bg-yellow-50' : 'bg-green-50'}`}>
                <div>
                  <p className="font-bold text-stone-800">{voerNaam}</p>
                  <p className={`text-sm font-medium ${dae <= 7 ? 'text-red-700' : dae <= 30 ? 'text-yellow-700' : 'text-green-700'}`}>
                    {dae <= 7 && <AlertTriangle className="inline w-4 h-4 mr-1" />}
                    {dae === Infinity ? "Onbeperk" : `${dae} dae`} se voer oor
                  </p>
                  <p className="text-xs text-stone-500">
                      {(voerInStoor[voerNaam]?.sakke || 0)} sakke
                  </p>
                </div>
                <div className="text-right">
                  <p className="font-semibold text-stone-700">{(voerInStoor[voerNaam]?.totaalKg || 0).toFixed(1)} kg</p>
                  <p className="text-xs text-stone-500">{(daaglikseVerbruik[voerNaam] || 0).toFixed(1)} kg/dag</p>
                </div>
              </div>
            ))
          ) : (
            <div className="text-center py-4 text-stone-500">
              <Info className="mx-auto w-8 h-8 mb-2" />
              <p>Geen aktiewe voerkrale met voerverbruik nie.</p>
            </div>
          )}
          <Button onClick={() => setShowStoorForm(true)} className="w-full">
              <Plus className="w-4 h-4 mr-2"/> Voeg Voer By Stoor
          </Button>
          {showStoorForm && (
              <VoerStoorForm
                  stoor={null} // Pass null for new entry
                  voerStoor={voerStoor} // Pass existing stoor items if needed for context/validation
                  onSubmit={handleStoorSubmit}
                  onCancel={() => setShowStoorForm(false)}
              />
          )}
        </CardContent>
      </Card>
      
      <Card className="shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <TrendingUp className="w-5 h-5 text-emerald-500" />
            Voer Aankoop Analise
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2 items-end">
            <div>
              <Label htmlFor="startDate" className="text-sm">Van</Label>
              <Input id="startDate" type="date" value={dateRange.start} onChange={e => setDateRange(p => ({...p, start: e.target.value}))} />
            </div>
             <div>
              <Label htmlFor="endDate" className="text-sm">Tot</Label>
              <Input id="endDate" type="date" value={dateRange.end} onChange={e => setDateRange(p => ({...p, end: e.target.value}))} />
            </div>
          </div>

          {dateRange.start && dateRange.end && (
             <div className="p-4 bg-stone-100 rounded-lg space-y-3">
               <div className="flex justify-between items-center">
                 <p className="font-semibold">Totale Koste in Tydperk:</p>
                 <p className={`font-bold text-lg text-emerald-700 ${!showTotals && 'blur-sm'}`}>
                   {showTotals ? `R ${gefilterdeAankope.totaalKoste.toFixed(2)}` : 'R XXXXX.XX'}
                 </p>
               </div>
               <div className="flex justify-between items-center">
                 <p className="font-semibold">Totale Massa (kg) Gekoop:</p>
                 <p className="font-bold text-lg text-stone-700">{gefilterdeAankope.totaalKg.toFixed(1)} kg</p>
               </div>
               <Button size="sm" variant="outline" onClick={() => setShowTotals(!showTotals)} className="w-full">
                 {showTotals ? <EyeOff className="w-4 h-4 mr-2" /> : <Eye className="w-4 h-4 mr-2" />}
                 {showTotals ? 'Versteek Koste' : 'Wys Koste'}
               </Button>
             </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
