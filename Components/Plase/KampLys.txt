import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Wheat, Edit, Trash2, Activity, BarChart3, Calendar, PawPrint, Clock, Heart, Shield, AlertTriangle, Skull } from "lucide-react";
import { format, differenceInDays } from "date-fns";
import { af } from "date-fns/locale";

const statusColors = {
  aktief: "bg-green-100 text-green-800 border-green-200",
  rus: "bg-yellow-100 text-yellow-800 border-yellow-200",
  onderhoud: "bg-red-100 text-red-800 border-red-200"
};

const weidingColors = {
  natuurlik: "bg-green-100 text-green-800",
  aangeplant: "bg-blue-100 text-blue-800",
  gemeng: "bg-purple-100 text-purple-800"
};

export default function KampLys({ plaas, kampe, tellings, onEditKamp, onDeleteKamp, onStatusChange }) {
  const [selectedKamp, setSelectedKamp] = useState(null);
  const [showTellingDetails, setShowTellingDetails] = useState(false);

  const getKampTellings = (kampId) => {
    return tellings?.filter(t => t.kamp_id === kampId).sort((a, b) => new Date(b.datum) - new Date(a.datum)) || [];
  };

  const getRustydperk = (kamp) => {
    if (kamp.status !== 'aktief' || !kamp.rus_begin_datum) return null;
    
    const rusBeginDatum = new Date(kamp.rus_begin_datum);
    const vandaag = new Date();
    return Math.floor((vandaag - rusBeginDatum) / (1000 * 60 * 60 * 24));
  };

  const getKampStats = (kampId) => {
    const kampTellings = getKampTellings(kampId);
    if (kampTellings.length === 0) return null;
    
    const laasteTelling = kampTellings[0];
    return {
      ooie: laasteTelling.aantal_ooie || 0,
      ramme: laasteTelling.aantal_ramme || 0,
      gemerkteLammers: laasteTelling.aantal_lammers_gemerk || 0,
      ongemerkteLammers: laasteTelling.aantal_lammers_ongemerk || 0,
      ooieKort: laasteTelling.aantal_ooie_kort || 0,
      ooieDood: laasteTelling.aantal_ooie_dood || 0,
    };
  };

  const handleStatusChange = async (kamp, newStatus) => {
    if (onStatusChange) {
      await onStatusChange(kamp, newStatus);
    }
  };

  const openTellingDetails = (kamp) => {
    setSelectedKamp(kamp);
    setShowTellingDetails(true);
  };

  return (
    <>
      <Card className="shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader className="p-6 border-b border-stone-100">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <Wheat className="w-5 h-5 text-amber-500" />
            Kampe vir {plaas.naam}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          {kampe.length > 0 ? (
            <div className="grid md:grid-cols-2 gap-4">
              {kampe.map((kamp) => {
                const kampStats = getKampStats(kamp.id);
                const rustydperk = getRustydperk(kamp);
                
                return (
                  <div
                    key={kamp.id}
                    className="p-5 border border-stone-200 rounded-xl hover:shadow-md transition-all duration-300 bg-gradient-to-br from-amber-50 to-orange-50"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Activity className="w-5 h-5 text-amber-600" />
                        <h3 className="font-bold text-stone-800">{kamp.naam}</h3>
                      </div>
                      <div className="flex gap-1">
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => onEditKamp(kamp)}
                          className="h-8 w-8 p-0 hover:bg-blue-100"
                        >
                          <Edit className="w-3 h-3 text-blue-600" />
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => onDeleteKamp(kamp)}
                          className="h-8 w-8 p-0 hover:bg-red-100"
                        >
                          <Trash2 className="w-3 h-3 text-red-600" />
                        </Button>
                      </div>
                    </div>

                    <div className="space-y-3">
                      <div className="flex flex-wrap gap-2">
                        <select
                          value={kamp.status}
                          onChange={(e) => handleStatusChange(kamp, e.target.value)}
                          className={`px-3 py-1 rounded-full text-xs font-medium border ${statusColors[kamp.status]} cursor-pointer`}
                        >
                          <option value="aktief">Aktief</option>
                          <option value="rus">Rus</option>
                          <option value="onderhoud">Onderhoud</option>
                        </select>
                        <Badge variant="outline" className={weidingColors[kamp.weidingstipe]}>
                          {kamp.weidingstipe.charAt(0).toUpperCase() + kamp.weidingstipe.slice(1)}
                        </Badge>
                      </div>

                      <div className="grid grid-cols-2 gap-3 text-sm">
                        {kamp.oppervlakte && (
                          <div>
                            <p className="text-stone-500">Oppervlakte</p>
                            <p className="font-semibold text-stone-800">{kamp.oppervlakte} ha</p>
                          </div>
                        )}
                        {rustydperk !== null && (
                          <div>
                            <p className="text-stone-500 flex items-center gap-1">
                              <Clock className="w-3 h-3" />
                              Rustydperk
                            </p>
                            <p className="font-semibold text-stone-800">{rustydperk} dae</p>
                          </div>
                        )}
                      </div>

                      <Button
                        variant="outline"
                        size="sm"
                        className="w-full mt-3"
                        onClick={() => openTellingDetails(kamp)}
                      >
                        <BarChart3 className="w-4 h-4 mr-2" />
                        Wys Tellings ({getKampTellings(kamp.id).length})
                      </Button>
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <div className="text-center py-12 text-stone-500">
              <Wheat className="w-16 h-16 mx-auto mb-4 opacity-50" />
              <p className="text-lg font-medium mb-2">Geen kampe nog nie</p>
              <p>Begin deur jou eerste kamp te skep vir hierdie plaas</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Telling Details Dialog */}
      <Dialog open={showTellingDetails} onOpenChange={setShowTellingDetails}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <BarChart3 className="w-5 h-5" />
              Tellings vir {selectedKamp?.naam}
            </DialogTitle>
          </DialogHeader>
          
          {selectedKamp && (
            <div className="space-y-4">
              {/* Latest Stats Summary */}
              {(() => {
                const stats = getKampStats(selectedKamp.id);
                if (!stats) return <p>Geen tellings beskikbaar nie</p>;
                
                return (
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4 p-4 bg-stone-50 rounded-xl">
                    <div className="text-center">
                      <Heart className="w-4 h-4 mx-auto mb-1 text-pink-500" />
                      <p className="text-xs text-stone-600">Ooie</p>
                      <p className="font-bold text-stone-800">{stats.ooie}</p>
                    </div>
                    <div className="text-center">
                      <Shield className="w-4 h-4 mx-auto mb-1 text-blue-500" />
                      <p className="text-xs text-stone-600">Ramme</p>
                      <p className="font-bold text-stone-800">{stats.ramme}</p>
                    </div>
                    <div className="text-center">
                      <PawPrint className="w-4 h-4 mx-auto mb-1 text-green-500" />
                      <p className="text-xs text-stone-600">Gem. Lammers</p>
                      <p className="font-bold text-stone-800">{stats.gemerkteLammers}</p>
                    </div>
                    <div className="text-center">
                      <PawPrint className="w-4 h-4 mx-auto mb-1 text-yellow-500" />
                      <p className="text-xs text-stone-600">Ongem. Lammers</p>
                      <p className="font-bold text-stone-800">{stats.ongemerkteLammers}</p>
                    </div>
                    <div className="text-center">
                      <AlertTriangle className="w-4 h-4 mx-auto mb-1 text-orange-500" />
                      <p className="text-xs text-stone-600">Ooie Kort</p>
                      <p className="font-bold text-stone-800">{stats.ooieKort}</p>
                    </div>
                    <div className="text-center">
                      <Skull className="w-4 h-4 mx-auto mb-1 text-red-500" />
                      <p className="text-xs text-stone-600">Ooie Dood</p>
                      <p className="font-bold text-stone-800">{stats.ooieDood}</p>
                    </div>
                  </div>
                );
              })()}

              {/* Detailed Tellings Table */}
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Datum</TableHead>
                      <TableHead>Ooie</TableHead>
                      <TableHead>Ramme</TableHead>
                      <TableHead>Gem. Lammers</TableHead>
                      <TableHead>Ongem. Lammers</TableHead>
                      <TableHead>Ooie Kort</TableHead>
                      <TableHead>Ooie Dood</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {getKampTellings(selectedKamp.id).slice(0, 10).map((telling) => (
                      <TableRow key={telling.id}>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Calendar className="w-4 h-4 text-stone-500" />
                            {format(new Date(telling.datum), 'dd MMM yyyy', { locale: af })}
                          </div>
                        </TableCell>
                        <TableCell className="font-semibold">{telling.aantal_ooie || 0}</TableCell>
                        <TableCell className="font-semibold">{telling.aantal_ramme || 0}</TableCell>
                        <TableCell className="font-semibold">{telling.aantal_lammers_gemerk || 0}</TableCell>
                        <TableCell className="font-semibold">{telling.aantal_lammers_ongemerk || 0}</TableCell>
                        <TableCell className="font-semibold text-orange-600">{telling.aantal_ooie_kort || 0}</TableCell>
                        <TableCell className="font-semibold text-red-600">{telling.aantal_ooie_dood || 0}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
}