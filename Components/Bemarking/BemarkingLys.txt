import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Tag, Edit, Trash2, Calendar, TrendingUp, ArrowUpDown, ChevronDown, ChevronUp } from "lucide-react";
import { format } from "date-fns";
import { af } from "date-fns/locale";

export default function BemarkingLys({ bemarkings, onEdit, onDelete }) {
  const [selectedDateRange, setSelectedDateRange] = useState({
    startDate: "",
    endDate: ""
  });
  const [deletingId, setDeletingId] = useState(null);
  const [sortOrder, setSortOrder] = useState('desc');
  const [expandedRows, setExpandedRows] = useState({});
  const [globalBlur, setGlobalBlur] = useState(false);

  useEffect(() => {
    // Listen for global blur events
    const handleGlobalBlur = (event) => {
      setGlobalBlur(event.detail);
    };

    // Check initial state
    const savedBlur = localStorage.getItem('globalBlurValues');
    if (savedBlur === 'true') {
      setGlobalBlur(true);
    }

    window.addEventListener('globalBlurToggle', handleGlobalBlur);
    return () => window.removeEventListener('globalBlurToggle', handleGlobalBlur);
  }, []);

  const formatDate = (dateString) => {
    try {
      if (!dateString) return 'Onbekende Datum';
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return 'Ongeldige Datum';
      return format(date, 'dd MMM yyyy', { locale: af });
    } catch (error) {
      console.error('Datum formaat fout:', error);
      return 'Ongeldige Datum';
    }
  };

  const handleDelete = async (bemarking) => {
    if (deletingId) return;
    
    const confirmed = window.confirm(`Is jy seker jy wil hierdie bemarking van ${bemarking.tipe_dier} op ${formatDate(bemarking.datum)} skrap?`);
    
    if (confirmed) {
      setDeletingId(bemarking.id);
      try {
        await onDelete(bemarking);
      } catch (error) {
        console.error("Fout met skrap van bemarking:", error);
        alert("Kon nie bemarking skrap nie. Dit is moontlik reeds geskrap of bestaan nie meer nie.");
      } finally {
        setDeletingId(null);
      }
    }
  };

  const getFilteredBemarkings = () => {
    let filtered = bemarkings;
    if (selectedDateRange.startDate && selectedDateRange.endDate) {
       filtered = bemarkings.filter(bemarking => {
        try {
          const bemarkingDate = new Date(bemarking.datum);
          const startDate = new Date(selectedDateRange.startDate);
          const endDate = new Date(selectedDateRange.endDate);
          
          if (isNaN(bemarkingDate.getTime()) || isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
            return false;
          }
          
          return bemarkingDate >= startDate && bemarkingDate <= endDate;
        } catch (error) {
          console.error('Datum filter fout:', error);
          return false;
        }
      });
    }

    return filtered.sort((a, b) => {
      const dateA = new Date(a.datum);
      const dateB = new Date(b.datum);
      if (sortOrder === 'desc') {
        return dateB.getTime() - dateA.getTime();
      }
      return dateA.getTime() - dateB.getTime();
    });
  };

  const toggleExpandRow = (bemarkingId) => {
    setExpandedRows(prev => ({
      ...prev,
      [bemarkingId]: !prev[bemarkingId]
    }));
  };

  const filteredBemarkings = getFilteredBemarkings();

  return (
    <Card className="shadow-lg bg-white/80 backdrop-blur-sm">
      <CardHeader className="p-6 border-b border-stone-100">
        <div className="flex flex-col gap-4">
          <div className="flex justify-between items-center">
            <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
              <Tag className="w-5 h-5 text-purple-500" />
              Alle Bemarkings
            </CardTitle>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setSortOrder(sortOrder === 'desc' ? 'asc' : 'desc')}
            >
              <ArrowUpDown className="w-4 h-4 mr-2" />
              Sorteer Datum
            </Button>
          </div>
          
          {/* Date Range Filter */}
          <div className="flex flex-wrap gap-4 items-end">
            <div className="flex gap-2 items-end">
              <div>
                <Label className="text-sm text-stone-600">Van Datum</Label>
                <Input
                  type="date"
                  value={selectedDateRange.startDate}
                  onChange={(e) => setSelectedDateRange(prev => ({...prev, startDate: e.target.value}))}
                  className="w-40"
                />
              </div>
              <div>
                <Label className="text-sm text-stone-600">Tot Datum</Label>
                <Input
                  type="date"
                  value={selectedDateRange.endDate}
                  onChange={(e) => setSelectedDateRange(prev => ({...prev, endDate: e.target.value}))}
                  className="w-40"
                />
              </div>
              <Button
                variant="outline"
                onClick={() => setSelectedDateRange({startDate: "", endDate: ""})}
              >
                Verwyder Filter
              </Button>
            </div>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        {filteredBemarkings.length > 0 ? (
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="bg-stone-50">
                  <TableHead className="font-semibold">Details</TableHead>
                  <TableHead className="font-semibold">Datum</TableHead>
                  <TableHead className="font-semibold">Tipe Dier</TableHead>
                  <TableHead className="font-semibold">Aantal</TableHead>
                  <TableHead className="font-semibold">Gem. Gewig</TableHead>
                  <TableHead className="font-semibold">Gem. Prys</TableHead>
                  <TableHead className="font-semibold">Uitslag %</TableHead>
                  <TableHead className="font-semibold">Totale Waarde</TableHead>
                  <TableHead className="font-semibold">Aksies</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredBemarkings.map((bemarking) => (
                  <React.Fragment key={bemarking.id}>
                    <TableRow className="hover:bg-stone-50 transition-colors">
                      <TableCell>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleExpandRow(bemarking.id)}
                          className="p-1"
                        >
                          {expandedRows[bemarking.id] ? 
                            <ChevronUp className="w-4 h-4" /> : 
                            <ChevronDown className="w-4 h-4" />
                          }
                        </Button>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Calendar className="w-4 h-4 text-stone-500" />
                          {formatDate(bemarking.datum)}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="secondary" className="capitalize">
                          {bemarking.tipe_dier.replace('_', ' ')}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <span className="font-semibold text-purple-600">
                          {bemarking.totaal_aantal || 0}
                        </span>
                      </TableCell>
                      <TableCell>
                        <span className="font-medium">
                          {bemarking.gemiddelde_gewig ? `${bemarking.gemiddelde_gewig}kg` : '-'}
                        </span>
                      </TableCell>
                      <TableCell>
                        <span className={`font-medium ${globalBlur && 'blur-sm'}`}>
                          {bemarking.gemiddelde_prys ? `R${bemarking.gemiddelde_prys}` : '-'}
                        </span>
                      </TableCell>
                      <TableCell>
                        <span className="font-medium">
                          {bemarking.uitslag_persentasie ? `${bemarking.uitslag_persentasie}%` : '-'}
                        </span>
                      </TableCell>
                      <TableCell>
                        <span className={`font-bold text-green-600 ${globalBlur && 'blur-sm'}`}>
                          R {(bemarking.totale_waarde || 0).toFixed(2)}
                        </span>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => onEdit(bemarking)}
                            className="h-8 w-8 p-0 hover:bg-blue-100"
                          >
                            <Edit className="w-4 h-4 text-blue-600" />
                          </Button>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => handleDelete(bemarking)}
                            disabled={deletingId === bemarking.id}
                            className="h-8 w-8 p-0 hover:bg-red-100"
                          >
                            <Trash2 className={`w-4 h-4 ${deletingId === bemarking.id ? 'text-gray-400' : 'text-red-600'}`} />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                    
                    {/* Expanded Details Row */}
                    {expandedRows[bemarking.id] && (
                      <TableRow>
                        <TableCell colSpan={9} className="bg-stone-50 p-6">
                          <div className="space-y-4">
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                              {bemarking.bemarker && (
                                <div>
                                  <p className="text-sm font-semibold text-stone-600">Bemarker:</p>
                                  <p className="text-stone-800">{bemarking.bemarker}</p>
                                </div>
                              )}
                              <div>
                                <p className="text-sm font-semibold text-stone-600">Totale Massa:</p>
                                <p className="text-stone-800">{bemarking.totale_massa || 0} kg</p>
                              </div>
                            </div>
                            
                            {/* Grading Details */}
                            {Object.keys(bemarking.gradering_telling || {}).some(key => (bemarking.gradering_telling?.[key] || 0) > 0) && (
                              <div>
                                <h4 className="font-semibold text-stone-700 mb-2">Gradering Details:</h4>
                                <div className="grid grid-cols-4 md:grid-cols-7 gap-2 text-xs">
                                  {Object.entries(bemarking.gradering_telling || {}).map(([grade, count]) => {
                                    if ((count || 0) > 0) {
                                      const price = bemarking.gradering_pryse?.[grade] || 0;
                                      return (
                                        <div key={grade} className="p-2 bg-white rounded border">
                                          <p className="font-bold">{grade}</p>
                                          <p>Aantal: {count}</p>
                                          <p className={globalBlur ? 'blur-sm' : ''}>Prys: R{price}</p>
                                        </div>
                                      );
                                    }
                                    return null;
                                  })}
                                </div>
