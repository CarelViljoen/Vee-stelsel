
import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tag, Save, X, Calculator } from "lucide-react";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";

const graderingKategoriee = [
  "A0", "A1", "A2", "A3", "A4", "A5", "A6",
  "B0", "B1", "B2", "B3", "B4", "B5", "B6",
  "C0", "C1", "C2", "C3", "C4", "C5", "C6"
];

export default function BemarkingForm({ bemarking, onSubmit, onCancel }) {
  const [formData, setFormData] = useState(
    bemarking || {
      datum: new Date().toISOString().split("T")[0],
      tipe_dier: "lammers",
      gemiddelde_prys: "",
      gemiddelde_gewig: "",
      uitslag_persentasie: "", // Added new field
      bemarker: "",            // Added new field
      gradering_telling: {},
      gradering_pryse: {},
      totaal_aantal: "",
      totale_massa: "",
      totale_waarde: "",
      opmerkings: ""
    }
  );

  const handleChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleGraderingChange = (kategorie, type, value) => {
    setFormData(prev => ({
      ...prev,
      [type]: {
        ...prev[type],
        [kategorie]: value
      }
    }));
  };

  const berekenTotale = () => {
    let totaalAantal = 0;
    let totaleWaarde = 0;
    let totaleMassa = 0; // Hierdie is 'n skatting

    graderingKategoriee.forEach(kat => {
      const aantal = parseFloat(formData.gradering_telling?.[kat]) || 0;
      const prys = parseFloat(formData.gradering_pryse?.[kat]) || 0;
      
      totaalAantal += aantal;
      totaleWaarde += aantal * prys;
    });

    const gemGewig = parseFloat(formData.gemiddelde_gewig) || 0;
    if (totaalAantal > 0) {
      totaleMassa = totaalAantal * gemGewig;
    }

    setFormData(prev => ({
      ...prev,
      totaal_aantal: totaalAantal.toString(),
      totale_waarde: totaleWaarde.toFixed(2).toString(),
      totale_massa: totaleMassa.toFixed(2).toString(),
      gemiddelde_prys: (totaleWaarde / totaalAantal || 0).toFixed(2).toString()
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Added 'uitslag_persentasie' to numericFields
    const numericFields = ['gemiddelde_prys', 'gemiddelde_gewig', 'uitslag_persentasie', 'totaal_aantal', 'totale_massa', 'totale_waarde'];

    const submitData = Object.entries(formData).reduce((acc, [key, value]) => {
      if (numericFields.includes(key)) {
        acc[key] = parseFloat(value) || 0; // Converts empty or invalid string to 0
      } else if (key === 'gradering_telling' || key === 'gradering_pryse') {
        acc[key] = Object.entries(value || {}).reduce((subAcc, [subKey, subValue]) => {
          subAcc[subKey] = parseFloat(subValue) || 0;
          return subAcc;
        }, {});
      } else {
        acc[key] = value; // Keep non-numeric fields as they are
      }
      return acc;
    }, {});
    
    onSubmit(submitData);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="mb-8"
    >
      <Card className="shadow-lg bg-white/90 backdrop-blur-sm">
        <CardHeader className="p-6 border-b border-stone-100">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <Tag className="w-5 h-5 text-purple-500" />
            {bemarking ? "Wysig Bemarking" : "Nuwe Bemarking"}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="datum" className="text-stone-700 font-semibold">
                  Datum *
                </Label>
                <Input
                  id="datum"
                  type="date"
                  value={formData.datum}
                  onChange={(e) => handleChange("datum", e.target.value)}
                  required
                  className="border-stone-300 focus:border-purple-500"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="tipe_dier" className="text-stone-700 font-semibold">
                  Tipe Dier *
                </Label>
                <Select
                  value={formData.tipe_dier}
                  onValueChange={(value) => handleChange("tipe_dier", value)}
                  required
                >
                  <SelectTrigger className="border-stone-300 focus:border-purple-500">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="lammers">Lammers</SelectItem>
                    <SelectItem value="ou_ooie">Ou Ooie</SelectItem>
                    <SelectItem value="ramme">Ramme</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            {/* New grid for gemiddelde_gewig and uitslag_persentasie */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="gemiddelde_gewig" className="text-stone-700 font-semibold">
                  Gemiddelde Gewig (kg)
                </Label>
                <Input
                  id="gemiddelde_gewig"
                  type="number"
                  step="0.01"
                  value={formData.gemiddelde_gewig}
                  onChange={(e) => handleChange("gemiddelde_gewig", e.target.value)}
                  placeholder="bv. 45.5"
                  className="border-stone-300 focus:border-purple-500"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="uitslag_persentasie" className="text-stone-700 font-semibold">
                  Uitslag % (Opsioneel)
                </Label>
                <Input
                  id="uitslag_persentasie"
                  type="number"
                  step="0.1"
                  min="0"
                  max="100"
                  value={formData.uitslag_persentasie}
                  onChange={(e) => handleChange("uitslag_persentasie", e.target.value)}
                  placeholder="bv. 52.3"
                  className="border-stone-300 focus:border-purple-500"
                />
              </div>
            </div>

            {/* New field for Bemarker */}
            <div className="space-y-2">
              <Label htmlFor="bemarker" className="text-stone-700 font-semibold">
                Bemarker (Opsioneel)
              </Label>
              <Input
                id="bemarker"
                value={formData.bemarker}
                onChange={(e) => handleChange("bemarker", e.target.value)}
                placeholder="Naam van die bemarker"
                className="border-stone-300 focus:border-purple-500"
              />
            </div>
            
            <Collapsible>
              <CollapsibleTrigger asChild>
                <Button variant="outline" className="w-full">Graderings Invoer</Button>
              </CollapsibleTrigger>
              <CollapsibleContent className="mt-4 p-4 border rounded-lg">
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  {graderingKategoriee.map(kat => (
                    <div key={kat} className="space-y-2">
                      <Label className="font-bold">{kat}</Label>
                      <Input 
                        type="number"
                        placeholder="Aantal"
                        value={formData.gradering_telling?.[kat] || ''}
                        onChange={e => handleGraderingChange(kat, 'gradering_telling', e.target.value)}
                      />
                       <Input 
                        type="number"
                        placeholder="Prys/kg"
                        step="0.01"
                        value={formData.gradering_pryse?.[kat] || ''}
                        onChange={e => handleGraderingChange(kat, 'gradering_pryse', e.target.value)}
                      />
                    </div>
                  ))}
                </div>
                <Button type="button" onClick={berekenTotale} className="mt-4 w-full bg-purple-200 text-purple-800 hover:bg-purple-300">
                  <Calculator className="w-4 h-4 mr-2" />
                  Bereken Totale
                </Button>
              </CollapsibleContent>
            </Collapsible>

            <div className="grid md:grid-cols-3 gap-6 pt-4 border-t">
               <div className="space-y-2">
                <Label>Totaal Aantal</Label>
                <Input type="number" value={formData.totaal_aantal} onChange={(e) => handleChange("totaal_aantal", e.target.value)} readOnly className="bg-stone-100" />
              </div>
              <div className="space-y-2">
                <Label>Gemiddelde Prys</Label>
                <Input type="number" step="0.01" value={formData.gemiddelde_prys} onChange={(e) => handleChange("gemiddelde_prys", e.target.value)} readOnly className="bg-stone-100" />
              </div>
              <div className="space-y-2">
                <Label>Totale Waarde</Label>
                <Input type="number" step="0.01" value={formData.totale_waarde} onChange={(e) => handleChange("totale_waarde", e.target.value)} readOnly className="bg-stone-100" />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="opmerkings" className="text-stone-700 font-semibold">
                Opmerkings
              </Label>
              <Textarea
                id="opmerkings"
                value={formData.opmerkings}
                onChange={(e) => handleChange("opmerkings", e.target.value)}
                placeholder="Enige addisionele opmerkings oor die bemarking..."
                rows={3}
                className="border-stone-300 focus:border-purple-500"
              />
            </div>

            <div className="flex justify-end gap-3 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
                className="border-stone-300 text-stone-700 hover:bg-stone-50"
              >
                <X className="w-4 h-4 mr-2" />
                Kanselleer
              </Button>
              <Button
                type="submit"
                className="bg-purple-600 hover:bg-purple-700"
              >
                <Save className="w-4 h-4 mr-2" />
                {bemarking ? "Werk By" : "Stoor Bemarking"}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </motion.div>
  );
}
