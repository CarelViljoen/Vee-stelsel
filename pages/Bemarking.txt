
import React, { useState, useEffect } from "react";
import { Bemarking, Kamp, Plaas } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { AnimatePresence } from "framer-motion";

import BemarkingForm from "../components/bemarking/BemarkingForm";
import BemarkingLys from "../components/bemarking/BemarkingLys";
import BemarkingStats from "../components/bemarking/BemarkingStats";

export default function BemarkingPage() {
  const [bemarkings, setBemarkings] = useState([]);
  const [kampe, setKampe] = useState([]);
  const [plase, setPlase] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [editingBemarking, setEditingBemarking] = useState(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    const [bemarkingData, kampData, plaasData] = await Promise.all([
      Bemarking.list("-datum"),
      Kamp.list(),
      Plaas.list()
    ]);
    setBemarkings(bemarkingData);
    setKampe(kampData);
    setPlase(plaasData);
  };

  const handleSubmit = async (bemarkingData) => {
    try {
      if (editingBemarking) {
        await Bemarking.update(editingBemarking.id, bemarkingData);
      } else {
        await Bemarking.create(bemarkingData);
      }
      setShowForm(false);
      setEditingBemarking(null);
      loadData();
    } catch (error) {
      console.error("Fout met indien van bemarking:", error);
      // Potentially show a user-friendly error message here
    }
  };

  const handleDelete = async (bemarking) => {
    try {
      await Bemarking.delete(bemarking.id);
      loadData();
    } catch (error) {
      console.error("Fout met skrap van bemarking:", error);
      // Potentially show a user-friendly error message here
      // throw error; // Re-throwing might not be necessary if handled gracefully here
    }
  };

  const getKampNaam = (kampId) => {
    const kamp = kampe.find(k => k.id === kampId);
    return kamp?.naam || 'Onbekende Kamp';
  };

  const getPlaasNaam = (kampId) => {
    const kamp = kampe.find(k => k.id === kampId);
    if (!kamp) return 'Onbekende Plaas';
    const plaas = plase.find(p => p.id === kamp.plaas_id);
    return plaas?.naam || 'Onbekende Plaas';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-amber-50 to-orange-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-stone-800 mb-2">
              Bemarking & Verkope
            </h1>
            <p className="text-stone-600 text-lg">
              Bestuur jou vee bemarking en verkope hier
            </p>
          </div>
          <Button 
            onClick={() => setShowForm(true)}
            className="w-full md:w-auto bg-purple-600 hover:bg-purple-700 shadow-lg"
          >
            <Plus className="w-5 h-5 mr-2" />
            Nuwe Bemarking
          </Button>
        </div>

        <AnimatePresence>
          {showForm && (
            <BemarkingForm
              bemarking={editingBemarking}
              kampe={kampe}
              plase={plase}
              onSubmit={handleSubmit}
              onCancel={() => {
                setShowForm(false);
                setEditingBemarking(null);
              }}
            />
          )}
        </AnimatePresence>

