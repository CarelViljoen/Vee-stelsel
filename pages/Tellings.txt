
import React, { useState, useEffect } from "react";
import { Telling, Kamp, Plaas } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Plus, GitCompareArrows } from "lucide-react";
import { AnimatePresence } from "framer-motion";

import TellingForm from "../components/tellings/TellingForm";
import TellingLys from "../components/tellings/TellingLys";
import SkaapwerkForm from "../components/tellings/SkaapwerkForm";

export default function TellingsPage() {
  const [tellings, setTellings] = useState([]);
  const [kampe, setKampe] = useState([]);
  const [plase, setPlase] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [showSkaapwerkForm, setShowSkaapwerkForm] = useState(false);
  const [editingTelling, setEditingTelling] = useState(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    const [tellingData, kampData, plaasData] = await Promise.all([
      Telling.list("-datum"),
      Kamp.list(),
      Plaas.list()
    ]);
    setTellings(tellingData);
    setKampe(kampData);
    setPlase(plaasData);
  };

  const handleSubmit = async (tellingData) => {
    if (editingTelling) {
      await Telling.update(editingTelling.id, tellingData);
    } else {
      await Telling.create(tellingData);
    }
    setShowForm(false);
    setEditingTelling(null);
    loadData();
  };
  
  const handleSkaapwerkSubmit = async (data) => {
    const { bronKampId, doelKampId, tellingData } = data;
    
    // 1. Create new telling for DoelKamp
    await Telling.create({ ...tellingData, kamp_id: doelKampId });

    // 2. If camps are different, update statuses and create zero-telling for BronKamp
    if (bronKampId && bronKampId !== doelKampId) {
      const bronKamp = kampe.find(k => k.id === bronKampId);
      const doelKamp = kampe.find(k => k.id === doelKampId);
      
      // Update DoelKamp to 'aktief'
      if (doelKamp) {
        await Kamp.update(doelKamp.id, { status: 'aktief' });
      }

      // Update BronKamp to 'rus' and create zero-telling
      if (bronKamp) {
        await Kamp.update(bronKamp.id, { status: 'rus', rus_begin_datum: new Date().toISOString().split('T')[0] });
        await Telling.create({
          kamp_id: bronKampId,
          datum: new Date().toISOString().split('T')[0],
          aantal_ooie: 0,
          aantal_ramme: 0,
          aantal_lammers_gemerk: 0,
          aantal_lammers_ongemerk: 0,
          totaal_lewend: 0,
          opmerkings: `Skape verskuif na kamp ${doelKamp?.naam || doelKampId}`
        });
      }
    }
    
    setShowSkaapwerkForm(false);
    loadData();
  };

  const handleDelete = async (telling) => {
    try {
      await Telling.delete(telling.id);
      loadData();
    } catch (error) {
      console.error("Fout met skrap van telling:", error);
      // Re-throw the error so the component can handle it
      throw error;
    }
  };

  const getKampNaam = (kampId) => {
    const kamp = kampe.find(k => k.id === kampId);
    return kamp?.naam || 'Onbekende Kamp';
  };

  const getPlaasNaam = (kampId) => {
    const kamp = kampe.find(k => k.id === kampId);
    if (!kamp) return 'Onbekende Plaas';
    const plaas = plase.find(p => p.id === kamp.plaas_id);
    return plaas?.naam || 'Onbekende Plaas';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-amber-50 to-orange-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
