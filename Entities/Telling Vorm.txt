import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calculator, Save, X } from "lucide-react";

export default function TellingForm({ telling, kampe, plase, onSubmit, onCancel }) {
  const [formData, setFormData] = useState(telling || {
    kamp_id: "",
    datum: new Date().toISOString().split('T')[0],
    aantal_ooie: "",
    aantal_ramme: "",
    aantal_lammers_gemerk: "",
    aantal_lammers_ongemerk: "",
    aantal_lammers_kort: "",
    aantal_ooie_kort: "",
    aantal_ooie_dood: "",
    opmerkings: ""
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Bereken totaal lewend (alles behalwe kort en dood)
    const totaalLewend = 
      (parseInt(formData.aantal_ooie) || 0) +
      (parseInt(formData.aantal_ramme) || 0) +
      (parseInt(formData.aantal_lammers_gemerk) || 0) +
      (parseInt(formData.aantal_lammers_ongemerk) || 0);
    
    const submitData = {
      ...formData,
      aantal_ooie: parseInt(formData.aantal_ooie) || 0,
      aantal_ramme: parseInt(formData.aantal_ramme) || 0,
      aantal_lammers_gemerk: parseInt(formData.aantal_lammers_gemerk) || 0,
      aantal_lammers_ongemerk: parseInt(formData.aantal_lammers_ongemerk) || 0,
      aantal_lammers_kort: parseInt(formData.aantal_lammers_kort) || 0,
      aantal_ooie_kort: parseInt(formData.aantal_ooie_kort) || 0,
      aantal_ooie_dood: parseInt(formData.aantal_ooie_dood) || 0,
      totaal_lewend: totaalLewend
    };
    
    onSubmit(submitData);
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const getKampsByPlaas = () => {
    const grouped = {};
    kampe.forEach(kamp => {
      const plaas = plase.find(p => p.id === kamp.plaas_id);
      const plaasNaam = plaas?.naam || 'Onbekende Plaas';
      if (!grouped[plaasNaam]) {
        grouped[plaasNaam] = [];
      }
      grouped[plaasNaam].push(kamp);
    });
    return grouped;
  };

  const kampsByPlaas = getKampsByPlaas();

  // Bereken totaal vir voorskou
  const getTotaalLewend = () => {
    return (parseInt(formData.aantal_ooie) || 0) +
           (parseInt(formData.aantal_ramme) || 0) +
           (parseInt(formData.aantal_lammers_gemerk) || 0) +
           (parseInt(formData.aantal_lammers_ongemerk) || 0);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="mb-8"
    >
      <Card className="shadow-lg bg-white/90 backdrop-blur-sm">
        <CardHeader className="p-6 border-b border-stone-100">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-stone-800">
            <Calculator className="w-5 h-5 text-blue-500" />
            {telling ? 'Wysig Telling' : 'Nuwe Telling'}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="kamp_id" className="text-stone-700 font-semibold">
                  Kamp *
                </Label>
                <Select
                  value={formData.kamp_id}
                  onValueChange={(value) => handleChange('kamp_id', value)}
                  required
                >
                  <SelectTrigger className="border-stone-300 focus:border-blue-500">
                    <SelectValue placeholder="Kies 'n kamp" />
                  </SelectTrigger>
                  <SelectContent>
                    {Object.entries(kampsByPlaas).map(([plaasNaam, plaasKampe]) => (
                      <div key={plaasNaam}>
                        <div className="px-2 py-1 text-xs font-semibold text-stone-500 bg-stone-100">
                          {plaasNaam}
                        </div>
                        {plaasKampe.map((kamp) => (
                          <SelectItem key={kamp.id} value={kamp.id}>
                            {kamp.naam} ({kamp.status})
                          </SelectItem>
                        ))}
                      </div>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="datum" className="text-stone-700 font-semibold">
                  Datum *
                </Label>
                <Input
                  id="datum"
                  type="date"
                  value={formData.datum}
                  onChange={(e) => handleChange('datum', e.target.value)}
                  required
                  className="border-stone-300 focus:border-blue-500"
                />
              </div>
            </div>

            {/* Lewende Diere */}
            <div className="p-4 bg-green-50 rounded-xl">
              <h3 className="font-semibold text-stone-800 mb-4">Lewende Diere</h3>
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="aantal_ooie" className="text-stone-700 font-semibold">
                    Aantal Ooie
                  </Label>
                  <Input
                    id="aantal_ooie"
                    type="number"
                    min="0"
                    value={formData.aantal_ooie}
                    onChange={(e) => handleChange('aantal_ooie', e.target.value)}
                    placeholder="0"
                    className="border-stone-300 focus:border-green-500"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="aantal_ramme" className="text-stone-700 font-semibold">
                    Aantal Ramme
                  </Label>
                  <Input
                    id="aantal_ramme"
                    type="number"
                    min="0"
                    value={formData.aantal_ramme}
                    onChange={(e) => handleChange('aantal_ramme', e.target.value)}
                    placeholder="0"
                    className="border-stone-300 focus:border-green-500"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="aantal_lammers_gemerk" className="text-stone-700 font-semibold">
                    Lammers Gemerk
                  </Label>
                  <Input
                    id="aantal_lammers_gemerk"
                    type="number"
                    min="0"
                    value={formData.aantal_lammers_gemerk}
                    onChange={(e) => handleChange('aantal_lammers_gemerk', e.target.value)}
                    placeholder="0"
                    className="border-stone-300 focus:border-green-500"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="aantal_lammers_ongemerk" className="text-stone-700 font-semibold">
                    Lammers Ongemerk
                  </Label>
                  <Input
                    id="aantal_lammers_ongemerk"
                    type="number"
                    min="0"
                    value={formData.aantal_lammers_ongemerk}
                    onChange={(e) => handleChange('aantal_lammers_ongemerk', e.target.value)}
                    placeholder="0"
                    className="border-stone-300 focus:border-green-500"
                  />
                </div>
              </div>
            </div>

            {/* Kort en Dood */}
            <div className="p-4 bg-red-50 rounded-xl">
              <h3 className="font-semibold text-stone-800 mb-4">Kort en Dood</h3>
              <div className="grid md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="aantal_lammers_kort" className="text-stone-700 font-semibold">
                    Lammers Kort
                  </Label>
                  <Input
                    id="aantal_lammers_kort"
                    type="number"
                    min="0"
                    value={formData.aantal_lammers_kort}
                    onChange={(e) => handleChange('aantal_lammers_kort', e.target.value)}
                    placeholder="0"
                    className="border-stone-300 focus:border-red-500"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="aantal_ooie_kort" className="text-stone-700 font-semibold">
                    Ooie Kort
                  </Label>
                  <Input
                    id="aantal_ooie_kort"
                    type="number"
                    min="0"
                    value={formData.aantal_ooie_kort}
                    onChange={(e) => handleChange('aantal_ooie_kort', e.target.value)}
                    placeholder="0"
                    className="border-stone-300 focus:border-red-500"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="aantal_ooie_dood" className="text-stone-700 font-semibold">
                    Ooie Dood
                  </Label>
                  <Input
                    id="aantal_ooie_dood"
                    type="number"
                    min="0"
                    value={formData.aantal_ooie_dood}
                    onChange={(e) => handleChange('aantal_ooie_dood', e.target.value)}
                    placeholder="0"
                    className="border-stone-300 focus:border-red-500"
                  />
                </div>
              </div>
            </div>

            {/* Totaal */}
            <div className="p-4 bg-blue-50 rounded-xl">
              <div className="text-center">
                <h3 className="font-semibold text-stone-800 mb-2">Totaal Lewende Skape</h3>
                <p className="text-3xl font-bold text-blue-600">{getTotaalLewend()}</p>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="opmerkings" className="text-stone-700 font-semibold">
                Opmerkings
              </Label>
              <Textarea
                id="opmerkings"
                value={formData.opmerkings}
                onChange={(e) => handleChange('opmerkings', e.target.value)}
                placeholder="Enige addisionele opmerkings oor die telling..."
                rows={3}
                className="border-stone-300 focus:border-blue-500"
              />
            </div>

            <div className="flex justify-end gap-3 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
                className="border-stone-300 text-stone-700 hover:bg-stone-50"
              >
                <X className="w-4 h-4 mr-2" />
                Kanselleer
              </Button>
              <Button
                type="submit"
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Save className="w-4 h-4 mr-2" />
                {telling ? 'Werk By' : 'Stoor Telling'}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </motion.div>
  );
}